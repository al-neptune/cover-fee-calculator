import { AccountBalanceWalletIcon, NeptuneLogo, NeptuneLogoText } from "@svg";
import { classNames, truncateAddress } from "@utils/functions";
import Head from "next/head";
import Link from "next/link";
import { FC, useState } from "react";

import ConnectWallet from "@wallet/components/ConnectWallet/ConnectWallet";
import { useRouter } from "next/router";
import { useNetwork } from "@wallet/context/Network";
import { useWeb3React } from "@web3-react/core";
import useAuth from "@wallet/hooks/useAuth";

import { ChainLogos, NetworkNames } from "@wallet/config/chains";
import { AccountDetailsModal } from "./AccountDetailsModal";

interface HeaderProps {
  title?: string;
  navKey?: string;
}

const Header: FC<HeaderProps> = ({
  title = "NeptuneMutual - Cover Fee Calculator",
  navKey = "",
}) => {
  const router = useRouter();
  // const { notifier } = useNotifier();
  const { networkId } = useNetwork();
  const { active, account } = useWeb3React();
  const { logout } = useAuth(networkId);
  const [isAccountDetailsOpen, setIsAccountDetailsOpen] = useState(false);

  type NavlinkType = { label: string; href: string };
  const navLinks: NavlinkType[] = [
    {
      label: "Home",
      href: "/",
    },
    {
      label: "Whitelist",
      href: "/whitelist",
    },
    {
      label: "Payouts",
      href: "/payouts",
    },
    {
      label: "Calculator",
      href: "/calculator",
    },
  ];

  const handleToggleAccountPopup = () => {
    setIsAccountDetailsOpen((prev) => !prev);
  };

  const handleDisconnect = () => {
    if (active) {
      logout();
    }
    setIsAccountDetailsOpen(false);
  };

  const ChainLogo = (ChainLogos as any)[networkId] || ChainLogos[1];
  const network = (
    <div className="flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium leading-loose bg-white border border-transparent rounded-md text-9B9B9B">
      <ChainLogo width={24} height={24} className="flex-shrink-0" />{" "}
      <p className="whitespace-nowrap text-ellipsis">
        {(NetworkNames as any)[networkId] || "Network"}
      </p>
    </div>
  );

  return (
    <div>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex gap-4 px-4 sm:px-8 bg-prim-blue md:gap-0">
        <div className="flex flex-wrap items-center w-full text-white gap-x-15">
          <Link href="/">
            <a className="block py-3 w-min">
              <div className="flex items-center gap-2">
                <NeptuneLogo />
                <NeptuneLogoText height={35} />
              </div>
            </a>
          </Link>
          <div className="flex text-sm gap-7 font-poppins">
            {navLinks.map(({ href, label }, idx) => (
              <Link href={href} key={idx}>
                <a
                  className={classNames(
                    "block py-8",
                    href.substring(1) === navKey
                      ? "box-border font-semibold border-b-4 rounded-sm border-prim-border text-text-prim"
                      : "text-text-gray font-normal"
                  )}
                >
                  {label}
                </a>
              </Link>
            ))}
          </div>
        </div>

        <ConnectWallet networkId={networkId} notifier={console.log}>
          {({ onOpen }: { onOpen: Function }) => {
            const button = (
              <button
                className="relative flex items-center gap-2 px-4 py-2 text-sm font-medium leading-loose text-white border border-transparent rounded-md bg-text-prim hover:bg-opacity-75"
                onClick={() => (active ? handleToggleAccountPopup() : onOpen())}
              >
                {!active ? (
                  <span className="whitespace-nowrap">Connect Wallet</span>
                ) : (
                  <>
                    <AccountBalanceWalletIcon width="24" height="24" />
                    <span>{account && truncateAddress(account)}</span>
                  </>
                )}
              </button>
            );
            return (
              <div className="flex flex-wrap items-center flex-grow gap-6 sm:flex-nowrap">
                {network}
                {button}
                {isAccountDetailsOpen && (
                  <AccountDetailsModal
                    networkId={networkId}
                    account={account ?? ""}
                    isOpen={isAccountDetailsOpen}
                    onClose={handleToggleAccountPopup}
                    handleDisconnect={handleDisconnect}
                  />
                )}
              </div>
            );
          }}
        </ConnectWallet>
      </div>
    </div>
  );
};

export default Header;
